'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _metaConstants = require('./metaConstants');

var _metaApi = require('./metaApi');

require('rxjs/add/operator/mapTo');

require('rxjs/add/operator/map');

require('rxjs/add/operator/mergeMap');

require('rxjs/add/operator/catch');

var _preactRouterRedux = require('preact-router-redux');

var genericUbus = function genericUbus(action$, store, _ref) {
  var wsAPI = _ref.wsAPI;
  return action$.ofType('UBUSCALL').map(function (x) {
    return x.payload;
  }).mergeMap(function (payload) {
    return wsAPI.call(store.getState().meta.sid, payload.action, payload.data, payload.method, payload.path).catch(function (payload) {
      return [{ type: 'UBUSCALL_ERROR', payload: payload }];
    });
  }).map(function (payload) {
    return { type: 'UBUSCALL_SUCCESS', payload: payload };
  });
};

var conectionOff = function conectionOff(action$) {
  return action$.ofType(_metaConstants.CONECTION_START).map(function (action) {
    return { type: _metaConstants.CONECTION_SETTINGS, payload: { conection: false, ws: action.payload } };
  });
};

var conectionAction = function conectionAction(action$, store, _ref2) {
  var wsAPI = _ref2.wsAPI;
  return action$.ofType(_metaConstants.CONECTION_START).mergeMap(function (url) {
    return wsAPI.conect(url.payload);
  }).mapTo({ type: _metaConstants.CONECTION_SUCCESS, payload: { conection: true } });
};

var changeUrlAction = function changeUrlAction(action$, store, _ref3) {
  var wsAPI = _ref3.wsAPI;
  return action$.ofType(_metaConstants.CONECTION_CHANGE_URL).mergeMap(function (url) {
    return (0, _metaApi.changeUrl)(wsAPI, url.payload);
  }).mapTo({ type: _metaConstants.CONECTION_SUCCESS, payload: { conection: true } });
};

var loadHostname = function loadHostname(action$, store, _ref4) {
  var wsAPI = _ref4.wsAPI;
  return action$.ofType.apply(action$, [_metaConstants.CONECTION_LOAD_HOSTNAME, _metaConstants.AUTH_LOGIN_SUCCESS]).mergeMap(function () {
    return (0, _metaApi.getHostname)(wsAPI, store.getState().meta.sid);
  }).map(function (payload) {
    return { type: _metaConstants.CONECTION_LOAD_HOSTNAME_SUCCESS, payload: payload };
  });
};

var loadNetwork = function loadNetwork(action$, store, _ref5) {
  var wsAPI = _ref5.wsAPI;
  return action$.ofType.apply(action$, [_metaConstants.CONECTION_LOAD_NEIGHBORS, _metaConstants.CONECTION_LOAD_HOSTNAME_SUCCESS]).mergeMap(function () {
    return (0, _metaApi.getCloudNodes)(wsAPI, store.getState().meta.sid);
  }).map(function (payload) {
    return { type: _metaConstants.CONECTION_LOAD_NEIGHBORS_SUCCESS, payload: payload };
  });
};

var defaultLoginAction = function defaultLoginAction(action$) {
  return action$.ofType(_metaConstants.CONECTION_SUCCESS).mapTo({ type: _metaConstants.AUTH_LOGIN, payload: { user: 'admin', password: 'admin' } });
};

var loginAction = function loginAction(action$, store, _ref6) {
  var wsAPI = _ref6.wsAPI;
  return action$.ofType(_metaConstants.AUTH_LOGIN).mergeMap(function (action) {
    return (0, _metaApi.login)(wsAPI, action.payload);
  }).map(function (sid) {
    return { type: _metaConstants.AUTH_LOGIN_SUCCESS, payload: sid };
  });
};

var redirectOnConnection = function redirectOnConnection(action$, store) {
  return action$.ofType(_metaConstants.CONECTION_SUCCESS).mapTo((0, _preactRouterRedux.push)(store.getState().meta.home));
};

exports.default = {
  genericUbus: genericUbus,
  conectionOff: conectionOff,
  conectionAction: conectionAction,
  changeUrlAction: changeUrlAction,
  loadNetwork: loadNetwork,
  loadHostname: loadHostname,
  defaultLoginAction: defaultLoginAction,
  loginAction: loginAction,
  redirectOnConnection: redirectOnConnection
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tZXRhRXBpY3MuanMiXSwibmFtZXMiOlsiZ2VuZXJpY1VidXMiLCJhY3Rpb24kIiwic3RvcmUiLCJ3c0FQSSIsIm9mVHlwZSIsIm1hcCIsIngiLCJwYXlsb2FkIiwibWVyZ2VNYXAiLCJjYWxsIiwiZ2V0U3RhdGUiLCJtZXRhIiwic2lkIiwiYWN0aW9uIiwiZGF0YSIsIm1ldGhvZCIsInBhdGgiLCJjYXRjaCIsInR5cGUiLCJjb25lY3Rpb25PZmYiLCJjb25lY3Rpb24iLCJ3cyIsImNvbmVjdGlvbkFjdGlvbiIsImNvbmVjdCIsInVybCIsIm1hcFRvIiwiY2hhbmdlVXJsQWN0aW9uIiwibG9hZEhvc3RuYW1lIiwibG9hZE5ldHdvcmsiLCJkZWZhdWx0TG9naW5BY3Rpb24iLCJ1c2VyIiwicGFzc3dvcmQiLCJsb2dpbkFjdGlvbiIsInJlZGlyZWN0T25Db25uZWN0aW9uIiwiaG9tZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBY0E7O0FBT0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBRUEsSUFBTUEsY0FBYyxTQUFkQSxXQUFjLENBQUVDLE9BQUYsRUFBV0MsS0FBWDtBQUFBLE1BQW9CQyxLQUFwQixRQUFvQkEsS0FBcEI7QUFBQSxTQUNsQkYsUUFBUUcsTUFBUixDQUFlLFVBQWYsRUFDR0MsR0FESCxDQUNPO0FBQUEsV0FBS0MsRUFBRUMsT0FBUDtBQUFBLEdBRFAsRUFFR0MsUUFGSCxDQUVhO0FBQUEsV0FBV0wsTUFBTU0sSUFBTixDQUNwQlAsTUFBTVEsUUFBTixHQUFpQkMsSUFBakIsQ0FBc0JDLEdBREYsRUFFcEJMLFFBQVFNLE1BRlksRUFHcEJOLFFBQVFPLElBSFksRUFJcEJQLFFBQVFRLE1BSlksRUFLcEJSLFFBQVFTLElBTFksRUFNcEJDLEtBTm9CLENBTWQ7QUFBQSxhQUFZLENBQUMsRUFBQ0MsTUFBSyxnQkFBTixFQUF3QlgsZ0JBQXhCLEVBQUQsQ0FBWjtBQUFBLEtBTmMsQ0FBWDtBQUFBLEdBRmIsRUFTR0YsR0FU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QUFBQSxXQUFVLEVBQUVNLHVDQUFGLEVBQTRCWCxTQUFTSyxHQUFyQyxFQUFWO0FBQUEsR0FGUCxDQURrQjtBQUFBLENBQXBCOztBQUtBLElBQU1xQix1QkFBdUIsU0FBdkJBLG9CQUF1QixDQUFFaEMsT0FBRixFQUFXQyxLQUFYO0FBQUEsU0FDM0JELFFBQVFHLE1BQVIsbUNBQ0dxQixLQURILENBQ1MsNkJBQUt2QixNQUFNUSxRQUFOLEdBQWlCQyxJQUFqQixDQUFzQnVCLElBQTNCLENBRFQsQ0FEMkI7QUFBQSxDQUE3Qjs7a0JBS2U7QUFDYmxDLDBCQURhO0FBRWJtQiw0QkFGYTtBQUdiRyxrQ0FIYTtBQUliSSxrQ0FKYTtBQUtiRSwwQkFMYTtBQU1iRCw0QkFOYTtBQU9iRSx3Q0FQYTtBQVFiRywwQkFSYTtBQVNiQztBQVRhLEMiLCJmaWxlIjoibWV0YUVwaWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ09ORUNUSU9OX1NUQVJULFxuICBDT05FQ1RJT05fRVJST1IsXG4gIENPTkVDVElPTl9TVUNDRVNTLFxuICBDT05FQ1RJT05fQ0hBTkdFX1VSTCxcbiAgQ09ORUNUSU9OX1NFVFRJTkdTLFxuICBDT05FQ1RJT05fTE9BRF9ORUlHSEJPUlMsXG4gIENPTkVDVElPTl9MT0FEX05FSUdIQk9SU19TVUNDRVNTLFxuICBDT05FQ1RJT05fTE9BRF9IT1NUTkFNRSxcbiAgQ09ORUNUSU9OX0xPQURfSE9TVE5BTUVfU1VDQ0VTUyxcbiAgQVVUSF9MT0dJTixcbiAgQVVUSF9MT0dJTl9TVUNDRVNTXG59IGZyb20gJy4vbWV0YUNvbnN0YW50cyc7XG5cbmltcG9ydCB7XG4gIGNoYW5nZVVybCxcbiAgZ2V0SG9zdG5hbWUsXG4gIGdldENsb3VkTm9kZXMsXG4gIGxvZ2luXG59IGZyb20gJy4vbWV0YUFwaSc7XG5cbmltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3IvbWFwVG8nO1xuaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci9tYXAnO1xuaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci9tZXJnZU1hcCc7XG5pbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL2NhdGNoJztcblxuaW1wb3J0IHsgcHVzaCB9IGZyb20gJ3ByZWFjdC1yb3V0ZXItcmVkdXgnO1xuXG5jb25zdCBnZW5lcmljVWJ1cyA9ICggYWN0aW9uJCwgc3RvcmUsIHsgd3NBUEkgfSApID0+XG4gIGFjdGlvbiQub2ZUeXBlKCdVQlVTQ0FMTCcpXG4gICAgLm1hcCh4ID0+IHgucGF5bG9hZClcbiAgICAubWVyZ2VNYXAoIHBheWxvYWQgPT4gd3NBUEkuY2FsbChcbiAgICAgIHN0b3JlLmdldFN0YXRlKCkubWV0YS5zaWQsXG4gICAgICBwYXlsb2FkLmFjdGlvbixcbiAgICAgIHBheWxvYWQuZGF0YSxcbiAgICAgIHBheWxvYWQubWV0aG9kLFxuICAgICAgcGF5bG9hZC5wYXRoXG4gICAgKS5jYXRjaChwYXlsb2FkID0+IChbe3R5cGU6J1VCVVNDQUxMX0VSUk9SJywgcGF5bG9hZH1dKSkpXG4gICAgLm1hcChwYXlsb2FkID0+ICh7IHR5cGU6ICdVQlVTQ0FMTF9TVUNDRVNTJywgcGF5bG9hZCB9KSk7XG4gICAgXG5cblxuY29uc3QgY29uZWN0aW9uT2ZmID0gKCBhY3Rpb24kICkgPT5cbiAgYWN0aW9uJC5vZlR5cGUoQ09ORUNUSU9OX1NUQVJUKVxuICAgIC5tYXAoKGFjdGlvbikgPT4gKHt0eXBlOiBDT05FQ1RJT05fU0VUVElOR1MsIHBheWxvYWQ6IHtjb25lY3Rpb246IGZhbHNlLCB3czogYWN0aW9uLnBheWxvYWQgfX0pKTtcblxuY29uc3QgY29uZWN0aW9uQWN0aW9uID0gKCBhY3Rpb24kLCBzdG9yZSwgeyB3c0FQSSB9ICkgPT5cbiAgYWN0aW9uJC5vZlR5cGUoQ09ORUNUSU9OX1NUQVJUKVxuICAgIC5tZXJnZU1hcCggdXJsID0+IHdzQVBJLmNvbmVjdCh1cmwucGF5bG9hZCkpXG4gICAgLm1hcFRvKHsgdHlwZTogQ09ORUNUSU9OX1NVQ0NFU1MsIHBheWxvYWQ6IHsgY29uZWN0aW9uOiB0cnVlIH0gfSk7XG5cbmNvbnN0IGNoYW5nZVVybEFjdGlvbiA9ICggYWN0aW9uJCwgc3RvcmUsIHsgd3NBUEkgfSApID0+XG4gIGFjdGlvbiQub2ZUeXBlKENPTkVDVElPTl9DSEFOR0VfVVJMKVxuICAgIC5tZXJnZU1hcCggdXJsID0+IGNoYW5nZVVybCh3c0FQSSwgdXJsLnBheWxvYWQpKVxuICAgIC5tYXBUbyh7IHR5cGU6IENPTkVDVElPTl9TVUNDRVNTLCBwYXlsb2FkOiB7IGNvbmVjdGlvbjogdHJ1ZSB9IH0pO1xuXG5jb25zdCBsb2FkSG9zdG5hbWUgPSAoIGFjdGlvbiQsIHN0b3JlLCB7IHdzQVBJIH0pID0+XG4gIGFjdGlvbiQub2ZUeXBlKC4uLltDT05FQ1RJT05fTE9BRF9IT1NUTkFNRSxBVVRIX0xPR0lOX1NVQ0NFU1NdKVxuICAgIC5tZXJnZU1hcCgoKSA9PiBnZXRIb3N0bmFtZSh3c0FQSSwgc3RvcmUuZ2V0U3RhdGUoKS5tZXRhLnNpZCkpXG4gICAgLm1hcChwYXlsb2FkID0+ICh7dHlwZTpDT05FQ1RJT05fTE9BRF9IT1NUTkFNRV9TVUNDRVNTLCBwYXlsb2FkfSkpO1xuXG5jb25zdCBsb2FkTmV0d29yayA9ICggYWN0aW9uJCwgc3RvcmUsIHsgd3NBUEkgfSkgPT5cbiAgYWN0aW9uJC5vZlR5cGUoLi4uW0NPTkVDVElPTl9MT0FEX05FSUdIQk9SUywgQ09ORUNUSU9OX0xPQURfSE9TVE5BTUVfU1VDQ0VTU10pXG4gICAgLm1lcmdlTWFwKCgpID0+IGdldENsb3VkTm9kZXMod3NBUEksc3RvcmUuZ2V0U3RhdGUoKS5tZXRhLnNpZCkpXG4gICAgLm1hcChwYXlsb2FkID0+ICh7dHlwZTpDT05FQ1RJT05fTE9BRF9ORUlHSEJPUlNfU1VDQ0VTUywgcGF5bG9hZH0pKTtcbiBcbmNvbnN0IGRlZmF1bHRMb2dpbkFjdGlvbiA9ICggYWN0aW9uJCApID0+XG4gIGFjdGlvbiQub2ZUeXBlKENPTkVDVElPTl9TVUNDRVNTKVxuICAgIC5tYXBUbyh7IHR5cGU6IEFVVEhfTE9HSU4sIHBheWxvYWQ6IHt1c2VyOiAnYWRtaW4nLCBwYXNzd29yZDogJ2FkbWluJ319KTtcblxuY29uc3QgbG9naW5BY3Rpb24gPSAoIGFjdGlvbiQsIHN0b3JlLCB7IHdzQVBJIH0gKSA9PlxuICBhY3Rpb24kLm9mVHlwZShBVVRIX0xPR0lOKVxuICAgIC5tZXJnZU1hcCggYWN0aW9uID0+IGxvZ2luKHdzQVBJLGFjdGlvbi5wYXlsb2FkKSlcbiAgICAubWFwKChzaWQpID0+ICh7IHR5cGU6IEFVVEhfTE9HSU5fU1VDQ0VTUywgcGF5bG9hZDogc2lkIH0pKTtcblxuY29uc3QgcmVkaXJlY3RPbkNvbm5lY3Rpb24gPSAoIGFjdGlvbiQsIHN0b3JlICkgPT5cbiAgYWN0aW9uJC5vZlR5cGUoQ09ORUNUSU9OX1NVQ0NFU1MpXG4gICAgLm1hcFRvKHB1c2goc3RvcmUuZ2V0U3RhdGUoKS5tZXRhLmhvbWUpKTtcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdlbmVyaWNVYnVzLFxuICBjb25lY3Rpb25PZmYsXG4gIGNvbmVjdGlvbkFjdGlvbixcbiAgY2hhbmdlVXJsQWN0aW9uLFxuICBsb2FkTmV0d29yayxcbiAgbG9hZEhvc3RuYW1lLFxuICBkZWZhdWx0TG9naW5BY3Rpb24sXG4gIGxvZ2luQWN0aW9uLFxuICByZWRpcmVjdE9uQ29ubmVjdGlvblxufTsiXX0=