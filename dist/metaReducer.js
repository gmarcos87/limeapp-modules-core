'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reducer = exports.initialState = undefined;

var _metaConstants = require('./metaConstants');

var initialState = exports.initialState = {
  title: 'LimeApp',
  sid: 'no_user',
  status: 'start',
  url: '/',
  conection: false,
  ws: '',
  interval: 1500,
  stations: [],
  base: '',
  home: '/tasks',
  selectedHost: ''
};

var reducer = exports.reducer = function reducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var _ref = arguments[1];
  var type = _ref.type,
      payload = _ref.payload;

  switch (type) {
    case _metaConstants.CONECTION_START:
      return Object.assign({}, state, { conection: false, ws: payload, sid: 'no_user' });
    case _metaConstants.CONECTION_CHANGE_URL:
      return Object.assign({}, state, { conection: false, ws: payload, sid: 'no_user' });
    case _metaConstants.CONECTION_SUCCESS:
      return Object.assign({}, state, payload);
    case _metaConstants.AUTH_LOGIN_SUCCESS:
      return Object.assign({}, state, { sid: payload });
    case _metaConstants.CONECTION_LOAD_HOSTNAME_SUCCESS:
      if (state.base === '') {
        return Object.assign({}, state, { base: payload.hostname, selectedHost: payload.hostname });
      }
      return Object.assign({}, state, { selectedHost: payload.hostname });
    case _metaConstants.CONECTION_CHANGE_CURRENT_BASE:
      return Object.assign({}, state, { selectedHost: payload.hostname });
    case _metaConstants.CONECTION_LOAD_NEIGHBORS_SUCCESS:
      return Object.assign({}, state, { stations: payload.concat([state.base]).sort(), status: 'ready' });
    default:
      return state;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tZXRhUmVkdWNlci5qcyJdLCJuYW1lcyI6WyJpbml0aWFsU3RhdGUiLCJ0aXRsZSIsInNpZCIsInN0YXR1cyIsInVybCIsImNvbmVjdGlvbiIsIndzIiwiaW50ZXJ2YWwiLCJzdGF0aW9ucyIsImJhc2UiLCJob21lIiwic2VsZWN0ZWRIb3N0IiwicmVkdWNlciIsInN0YXRlIiwidHlwZSIsInBheWxvYWQiLCJPYmplY3QiLCJhc3NpZ24iLCJob3N0bmFtZSIsImNvbmNhdCIsInNvcnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFVTyxJQUFNQSxzQ0FBZTtBQUMxQkMsU0FBTyxTQURtQjtBQUUxQkMsT0FBSyxTQUZxQjtBQUcxQkMsVUFBUSxPQUhrQjtBQUkxQkMsT0FBSyxHQUpxQjtBQUsxQkMsYUFBVyxLQUxlO0FBTTFCQyxNQUFJLEVBTnNCO0FBTzFCQyxZQUFVLElBUGdCO0FBUTFCQyxZQUFVLEVBUmdCO0FBUzFCQyxRQUFNLEVBVG9CO0FBVTFCQyxRQUFNLFFBVm9CO0FBVzFCQyxnQkFBYztBQVhZLENBQXJCOztBQWNBLElBQU1DLDRCQUFVLFNBQVZBLE9BQVUsR0FBNkM7QUFBQSxNQUE1Q0MsS0FBNEMsdUVBQXBDYixZQUFvQztBQUFBO0FBQUEsTUFBcEJjLElBQW9CLFFBQXBCQSxJQUFvQjtBQUFBLE1BQWRDLE9BQWMsUUFBZEEsT0FBYzs7QUFDbEUsVUFBUUQsSUFBUjtBQUNFO0FBQ0UsYUFBT0UsT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JKLEtBQWxCLEVBQXlCLEVBQUNSLFdBQVcsS0FBWixFQUFtQkMsSUFBSVMsT0FBdkIsRUFBZ0NiLEtBQUssU0FBckMsRUFBekIsQ0FBUDtBQUNGO0FBQ0UsYUFBT2MsT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JKLEtBQWxCLEVBQXlCLEVBQUNSLFdBQVcsS0FBWixFQUFtQkMsSUFBSVMsT0FBdkIsRUFBZ0NiLEtBQUssU0FBckMsRUFBekIsQ0FBUDtBQUNGO0FBQ0UsYUFBT2MsT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JKLEtBQWxCLEVBQXlCRSxPQUF6QixDQUFQO0FBQ0Y7QUFDRSxhQUFPQyxPQUFPQyxNQUFQLENBQWMsRUFBZCxFQUFrQkosS0FBbEIsRUFBeUIsRUFBQ1gsS0FBSWEsT0FBTCxFQUF6QixDQUFQO0FBQ0Y7QUFDRSxVQUFJRixNQUFNSixJQUFOLEtBQWUsRUFBbkIsRUFBc0I7QUFDcEIsZUFBT08sT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JKLEtBQWxCLEVBQXlCLEVBQUNKLE1BQU1NLFFBQVFHLFFBQWYsRUFBeUJQLGNBQWNJLFFBQVFHLFFBQS9DLEVBQXpCLENBQVA7QUFDRDtBQUNELGFBQU9GLE9BQU9DLE1BQVAsQ0FBYyxFQUFkLEVBQWtCSixLQUFsQixFQUF5QixFQUFDRixjQUFjSSxRQUFRRyxRQUF2QixFQUF6QixDQUFQO0FBQ0Y7QUFDRSxhQUFPRixPQUFPQyxNQUFQLENBQWMsRUFBZCxFQUFrQkosS0FBbEIsRUFBeUIsRUFBQ0YsY0FBY0ksUUFBUUcsUUFBdkIsRUFBekIsQ0FBUDtBQUNGO0FBQ0UsYUFBT0YsT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JKLEtBQWxCLEVBQXlCLEVBQUNMLFVBQVNPLFFBQVFJLE1BQVIsQ0FBZSxDQUFDTixNQUFNSixJQUFQLENBQWYsRUFBNkJXLElBQTdCLEVBQVYsRUFBOENqQixRQUFPLE9BQXJELEVBQXpCLENBQVA7QUFDRjtBQUNFLGFBQU9VLEtBQVA7QUFuQko7QUFxQkQsQ0F0Qk0iLCJmaWxlIjoibWV0YVJlZHVjZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDT05FQ1RJT05fU1VDQ0VTUyxcbiAgQ09ORUNUSU9OX1NUQVJULFxuICBDT05FQ1RJT05fQ0hBTkdFX1VSTCxcbiAgQ09ORUNUSU9OX0xPQURfTkVJR0hCT1JTX1NVQ0NFU1MsXG4gIENPTkVDVElPTl9MT0FEX0hPU1ROQU1FX1NVQ0NFU1MsXG4gIENPTkVDVElPTl9DSEFOR0VfQ1VSUkVOVF9CQVNFLFxuICBBVVRIX0xPR0lOX1NVQ0NFU1Ncbn0gZnJvbSAnLi9tZXRhQ29uc3RhbnRzJztcblxuZXhwb3J0IGNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcbiAgdGl0bGU6ICdMaW1lQXBwJyxcbiAgc2lkOiAnbm9fdXNlcicsXG4gIHN0YXR1czogJ3N0YXJ0JyxcbiAgdXJsOiAnLycsXG4gIGNvbmVjdGlvbjogZmFsc2UsXG4gIHdzOiAnJyxcbiAgaW50ZXJ2YWw6IDE1MDAsXG4gIHN0YXRpb25zOiBbXSxcbiAgYmFzZTogJycsXG4gIGhvbWU6ICcvdGFza3MnLFxuICBzZWxlY3RlZEhvc3Q6ICcnXG59O1xuXG5leHBvcnQgY29uc3QgcmVkdWNlciA9IChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgeyB0eXBlLCBwYXlsb2FkIH0pID0+IHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBDT05FQ1RJT05fU1RBUlQ6XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHtjb25lY3Rpb246IGZhbHNlLCB3czogcGF5bG9hZCwgc2lkOiAnbm9fdXNlcicgfSk7XG4gICAgY2FzZSBDT05FQ1RJT05fQ0hBTkdFX1VSTDpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge2NvbmVjdGlvbjogZmFsc2UsIHdzOiBwYXlsb2FkLCBzaWQ6ICdub191c2VyJyB9KTtcbiAgICBjYXNlIENPTkVDVElPTl9TVUNDRVNTOlxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCBwYXlsb2FkKTtcbiAgICBjYXNlIEFVVEhfTE9HSU5fU1VDQ0VTUzpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge3NpZDpwYXlsb2FkfSk7XG4gICAgY2FzZSBDT05FQ1RJT05fTE9BRF9IT1NUTkFNRV9TVUNDRVNTOlxuICAgICAgaWYgKHN0YXRlLmJhc2UgPT09ICcnKXtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7YmFzZTogcGF5bG9hZC5ob3N0bmFtZSwgc2VsZWN0ZWRIb3N0OiBwYXlsb2FkLmhvc3RuYW1lfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHtzZWxlY3RlZEhvc3Q6IHBheWxvYWQuaG9zdG5hbWV9KTtcbiAgICBjYXNlIENPTkVDVElPTl9DSEFOR0VfQ1VSUkVOVF9CQVNFOlxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7c2VsZWN0ZWRIb3N0OiBwYXlsb2FkLmhvc3RuYW1lfSk7XG4gICAgY2FzZSBDT05FQ1RJT05fTE9BRF9ORUlHSEJPUlNfU1VDQ0VTUzpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge3N0YXRpb25zOnBheWxvYWQuY29uY2F0KFtzdGF0ZS5iYXNlXSkuc29ydCgpLHN0YXR1czoncmVhZHknfSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufTtcbiJdfQ==