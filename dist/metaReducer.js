'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reducer = exports.initialState = undefined;

var _metaConstants = require('./metaConstants');

var initialState = exports.initialState = {
  title: 'LimeApp',
  sid: 'no_user',
  status: 'start',
  url: '/',
  conection: false,
  ws: '',
  interval: 1500,
  stations: [],
  base: '',
  home: '/rx',
  selectedHost: ''
};

var reducer = exports.reducer = function reducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var _ref = arguments[1];
  var type = _ref.type,
      payload = _ref.payload;

  switch (type) {
    case _metaConstants.CONECTION_START:
      return Object.assign({}, state, { conection: false, ws: payload, sid: 'no_user' });
    case _metaConstants.CONECTION_CHANGE_URL:
      return Object.assign({}, state, { conection: false, ws: payload, sid: 'no_user' });
    case _metaConstants.CONECTION_SUCCESS:
      return Object.assign({}, state, payload);
    case _metaConstants.AUTH_LOGIN_SUCCESS:
      return Object.assign({}, state, { sid: payload });
    case _metaConstants.CONECTION_LOAD_HOSTNAME_SUCCESS:
      if (state.base === '') {
        return Object.assign({}, state, { base: payload.hostname, selectedHost: payload.hostname });
      }
      return Object.assign({}, state, { selectedHost: payload.hostname });
    case _metaConstants.CONECTION_CHANGE_CURRENT_BASE:
      return Object.assign({}, state, { selectedHost: '' });
    case _metaConstants.CONECTION_LOAD_NEIGHBORS_SUCCESS:
      return Object.assign({}, state, { stations: payload.concat([state.base]).sort(), status: 'ready' });
    default:
      return state;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tZXRhUmVkdWNlci5qcyJdLCJuYW1lcyI6WyJpbml0aWFsU3RhdGUiLCJ0aXRsZSIsInNpZCIsInN0YXR1cyIsInVybCIsImNvbmVjdGlvbiIsIndzIiwiaW50ZXJ2YWwiLCJzdGF0aW9ucyIsImJhc2UiLCJob21lIiwic2VsZWN0ZWRIb3N0IiwicmVkdWNlciIsInN0YXRlIiwidHlwZSIsInBheWxvYWQiLCJPYmplY3QiLCJhc3NpZ24iLCJob3N0bmFtZSIsImNvbmNhdCIsInNvcnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFVTyxJQUFNQSxzQ0FBZTtBQUMxQkMsU0FBTyxTQURtQjtBQUUxQkMsT0FBSyxTQUZxQjtBQUcxQkMsVUFBUSxPQUhrQjtBQUkxQkMsT0FBSyxHQUpxQjtBQUsxQkMsYUFBVyxLQUxlO0FBTTFCQyxNQUFJLEVBTnNCO0FBTzFCQyxZQUFVLElBUGdCO0FBUTFCQyxZQUFVLEVBUmdCO0FBUzFCQyxRQUFNLEVBVG9CO0FBVTFCQyxRQUFNLEtBVm9CO0FBVzFCQyxnQkFBYztBQVhZLENBQXJCOztBQWNBLElBQU1DLDRCQUFVLFNBQVZBLE9BQVUsR0FBNkM7QUFBQSxNQUE1Q0MsS0FBNEMsdUVBQXBDYixZQUFvQztBQUFBO0FBQUEsTUFBcEJjLElBQW9CLFFBQXBCQSxJQUFvQjtBQUFBLE1BQWRDLE9BQWMsUUFBZEEsT0FBYzs7QUFDbEUsVUFBUUQsSUFBUjtBQUNFO0FBQ0UsYUFBT0UsT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JKLEtBQWxCLEVBQXlCLEVBQUNSLFdBQVcsS0FBWixFQUFtQkMsSUFBSVMsT0FBdkIsRUFBZ0NiLEtBQUssU0FBckMsRUFBekIsQ0FBUDtBQUNGO0FBQ0UsYUFBT2MsT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JKLEtBQWxCLEVBQXlCLEVBQUNSLFdBQVcsS0FBWixFQUFtQkMsSUFBSVMsT0FBdkIsRUFBZ0NiLEtBQUssU0FBckMsRUFBekIsQ0FBUDtBQUNGO0FBQ0UsYUFBT2MsT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JKLEtBQWxCLEVBQXlCRSxPQUF6QixDQUFQO0FBQ0Y7QUFDRSxhQUFPQyxPQUFPQyxNQUFQLENBQWMsRUFBZCxFQUFrQkosS0FBbEIsRUFBeUIsRUFBQ1gsS0FBSWEsT0FBTCxFQUF6QixDQUFQO0FBQ0Y7QUFDRSxVQUFJRixNQUFNSixJQUFOLEtBQWUsRUFBbkIsRUFBc0I7QUFDcEIsZUFBT08sT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JKLEtBQWxCLEVBQXlCLEVBQUNKLE1BQU1NLFFBQVFHLFFBQWYsRUFBeUJQLGNBQWNJLFFBQVFHLFFBQS9DLEVBQXpCLENBQVA7QUFDRDtBQUNELGFBQU9GLE9BQU9DLE1BQVAsQ0FBYyxFQUFkLEVBQWtCSixLQUFsQixFQUF5QixFQUFDRixjQUFjSSxRQUFRRyxRQUF2QixFQUF6QixDQUFQO0FBQ0Y7QUFDRSxhQUFPRixPQUFPQyxNQUFQLENBQWMsRUFBZCxFQUFrQkosS0FBbEIsRUFBeUIsRUFBQ0YsY0FBYyxFQUFmLEVBQXpCLENBQVA7QUFDRjtBQUNFLGFBQU9LLE9BQU9DLE1BQVAsQ0FBYyxFQUFkLEVBQWtCSixLQUFsQixFQUF5QixFQUFDTCxVQUFTTyxRQUFRSSxNQUFSLENBQWUsQ0FBQ04sTUFBTUosSUFBUCxDQUFmLEVBQTZCVyxJQUE3QixFQUFWLEVBQThDakIsUUFBTyxPQUFyRCxFQUF6QixDQUFQO0FBQ0Y7QUFDRSxhQUFPVSxLQUFQO0FBbkJKO0FBcUJELENBdEJNIiwiZmlsZSI6Im1ldGFSZWR1Y2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ09ORUNUSU9OX1NVQ0NFU1MsXG4gIENPTkVDVElPTl9TVEFSVCxcbiAgQ09ORUNUSU9OX0NIQU5HRV9VUkwsXG4gIENPTkVDVElPTl9MT0FEX05FSUdIQk9SU19TVUNDRVNTLFxuICBDT05FQ1RJT05fTE9BRF9IT1NUTkFNRV9TVUNDRVNTLFxuICBDT05FQ1RJT05fQ0hBTkdFX0NVUlJFTlRfQkFTRSxcbiAgQVVUSF9MT0dJTl9TVUNDRVNTXG59IGZyb20gJy4vbWV0YUNvbnN0YW50cyc7XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gIHRpdGxlOiAnTGltZUFwcCcsXG4gIHNpZDogJ25vX3VzZXInLFxuICBzdGF0dXM6ICdzdGFydCcsXG4gIHVybDogJy8nLFxuICBjb25lY3Rpb246IGZhbHNlLFxuICB3czogJycsXG4gIGludGVydmFsOiAxNTAwLFxuICBzdGF0aW9uczogW10sXG4gIGJhc2U6ICcnLFxuICBob21lOiAnL3J4JyxcbiAgc2VsZWN0ZWRIb3N0OiAnJ1xufTtcblxuZXhwb3J0IGNvbnN0IHJlZHVjZXIgPSAoc3RhdGUgPSBpbml0aWFsU3RhdGUsIHsgdHlwZSwgcGF5bG9hZCB9KSA9PiB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgQ09ORUNUSU9OX1NUQVJUOlxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7Y29uZWN0aW9uOiBmYWxzZSwgd3M6IHBheWxvYWQsIHNpZDogJ25vX3VzZXInIH0pO1xuICAgIGNhc2UgQ09ORUNUSU9OX0NIQU5HRV9VUkw6XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHtjb25lY3Rpb246IGZhbHNlLCB3czogcGF5bG9hZCwgc2lkOiAnbm9fdXNlcicgfSk7XG4gICAgY2FzZSBDT05FQ1RJT05fU1VDQ0VTUzpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwgcGF5bG9hZCk7XG4gICAgY2FzZSBBVVRIX0xPR0lOX1NVQ0NFU1M6XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHtzaWQ6cGF5bG9hZH0pO1xuICAgIGNhc2UgQ09ORUNUSU9OX0xPQURfSE9TVE5BTUVfU1VDQ0VTUzpcbiAgICAgIGlmIChzdGF0ZS5iYXNlID09PSAnJyl7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge2Jhc2U6IHBheWxvYWQuaG9zdG5hbWUsIHNlbGVjdGVkSG9zdDogcGF5bG9hZC5ob3N0bmFtZX0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7c2VsZWN0ZWRIb3N0OiBwYXlsb2FkLmhvc3RuYW1lfSk7XG4gICAgY2FzZSBDT05FQ1RJT05fQ0hBTkdFX0NVUlJFTlRfQkFTRTpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge3NlbGVjdGVkSG9zdDogJyd9KTtcbiAgICBjYXNlIENPTkVDVElPTl9MT0FEX05FSUdIQk9SU19TVUNDRVNTOlxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7c3RhdGlvbnM6cGF5bG9hZC5jb25jYXQoW3N0YXRlLmJhc2VdKS5zb3J0KCksc3RhdHVzOidyZWFkeSd9KTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuIl19